

  List<int> L = new List<int>();
            for (int i = 1; i < 12; i++)
            {
                L.Add(i);
            
            }  
 Parallel.ForEach(L, dev =>
                {/*
                    while (true)
                    {
                       
                        DateTime localDate = DateTime.Now;
         
                        Thread.Sleep(dev*1000);
                    }
                   */

                });


     /*   Parallel.ForEach(elt.DataConfiguration, dataconfig =>
                              {
                                  foreach (Tag tag in dataconfig.TagList)
                                  {
                                      if (elt.is_Connected == true)
                                      {
                                          PublisherClass itemList = new PublisherClass();
                                          IList<BacnetValue> ListOfValue;
                                        

                                          if (elt.bacnetClient.ReadPropertyRequest(elt.bacnetAdress, new BacnetObjectId(SetTypes. SetAddressType(tag.Type), 0),SetTypes. SetPropType(tag.Properties[0]), out ListOfValue) == true)
                                          {
                                              Item element = new Item();
                                              element.TagName = tag.TageKey;
                                              element.Value = ListOfValue[0].Value;
                                              DateTime localDate = DateTime.Now;
                                              element.TimeStamp = localDate.ToString();
                                              itemList.Payload.Add(element);
                                              itemList.SchemaId = Worker.BacnetDevices[elt.Device_ID].ShemaId;
                                              Publisherqueue.Add(itemList);
                                              WorkerLogger.TraceLog(MessageType.Debug, "Collecting data from " + tag.TageKey + " succeeded");
                                          }
                                          else
                                          {
                                              if (elt.is_Connected == true)
                                              {
                                                  WorkerLogger.TraceLog(MessageType.Error, "Cannot read data from " + tag.TageKey);
                                              }
                                          }

                                      }
                                      else
                                      {
                                          break;
                                      }
                                  }

                                  Thread.Sleep(dataconfig.UpdateRate);
                              }
                                     );*/


   DateTime localDate2 = DateTime.Now;
                                Console.WriteLine("Device:: "+elt.Device_Name+" Bloc "+ bloc.Name +"::will wait for" + bloc.UpdateRate+"at "+localDate2);
                      
                                Thread.Sleep(bloc.UpdateRate);
                                DateTime localDate = DateTime.Now;
                                Console.WriteLine("Device:: " + elt.Device_Name + "Sending read request for bloc " + bloc.Name + " at " + localDate);